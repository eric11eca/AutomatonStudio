extends layout
append head
	link(rel="stylesheet", href="/assets/css/fsm.css")
	link(rel="stylesheet" href="https://netdna.bootstrapcdn.com/twitter-bootstrap/2.2.2/css/bootstrap-combined.min.css")

	.header
		nav.title-nav
			.title-banner
				a.title-bage
					img.head-icon(src='assets/img/logic1.png')
					| &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Computational Logic Toolbox
				ul.nav-items
					li
						button(type='button') Truth Table
						svg(width='6' height='4' fill='none' viewbox='0 0 6 4')
							path(fill='#999' d='M.471 0L0 .471 2.828 3.3 5.657.47 5.185 0 2.828 2.357.471 0z')
					li
						button(type='button') Automota
						svg(width='6' height='4' fill='none' viewbox='0 0 6 4')
							path(fill='#999' d='M.471 0L0 .471 2.828 3.3 5.657.47 5.185 0 2.828 2.357.471 0z')
					li
						button(type='button') Fitch
						svg(width='6' height='4' fill='none' viewbox='0 0 6 4')
							path(fill='#999' d='M.471 0L0 .471 2.828 3.3 5.657.47 5.185 0 2.828 2.357.471 0z')
					li
						button(type='button') Relational Logic
						svg(width='6' height='4' fill='none' viewbox='0 0 6 4')
							path(fill='#999' d='M.471 0L0 .471 2.828 3.3 5.657.47 5.185 0 2.828 2.357.471 0z')
	.main-content
		.truth-content
			.row-fluid
				.span6.column
					h3  &#x2460; Compose 
					ul.nav.nav-tabs
						li#fsminput.active
							a(href='#tab1' data-toggle='tab') Input automaton
						li#regexinput
							a(href='#tab2' data-toggle='tab') Input regex
					.tab-content
						#tab1.tab-pane.active
							.instructions
								p
									| Compose FSM from definition and transitions
								p
									| Follow the formal definition of a FSM
							p
								button#generateDFA.btn Generate random DFA
								button#generateNFA.btn Generate random NFA
								button#generateENFA.btn Generate random eNFA
							p
								table.state-table
									colgroup
										col(span='1' style='width: 10%;')
										col(span='1' style='width: 35%;')
										col(span='1' style='width: 55%;')
									tr
										td
											span(style='margin-left: 10px;') States:  
										td
											input#states.input-block-level(type='text' placeholder='...' spellcheck='false')
										td(rowspan='4')
											span(style='margin-left: 10px;') Transitions:
											textarea#transition.input-block-level(type='text' placeholder='...' spellcheck='false')
									tr
										td
											span(style='margin-left: 10px;') Alphabet:
										td
											input#alphabet.input-block-level(type='text' placeholder='...' spellcheck='false')
									tr
										td
											span(style='margin-left: 10px;') Starting:
										td
											input#start.input-block-level(type='text' placeholder='...' spellcheck='false')
									tr
										td
											span(style='margin-left: 10px;') Accepting:
										td
											input#accept.input-block-level(type='text' placeholder='...' spellcheck='false')
									tr
										td(colspan='2')
											button#createAutomaton.btn(disabled='') Create automaton
						#tab2.tab-pane
							.instructions
								p
									| Enter a regular expression into the input field below or click 
									strong Generate random regex
									|  to have the app generate a simple regex randomly for you.
									| &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Next, click 
									strong Create automaton
									|  to create a FSM for the defined regex and display its transition graph.
								p
									| A valid regex consists of alphanumeric characters representing the set of input symbols (e.g. 
									code a
									| , 
									code B
									| , 
									code 9
									| ), the 
									code $
									|  character representing the empty string, the choice operator 
									code +
									| , the Kleene operator 
									code *
									| , and parentheses 
									code (
									|  and 
									code )
									| . An example of a valid regex is: 
									code (a+B)*(c9+$)+$
									| .
							p
								button#generateRegex.btn Generate random regex
							p
								.control-group
									input#regex.input-block-level(type='text' placeholder='or write your own' spellcheck='false')
							p
								.control-group
									label(for='automatonType') Select generated FSM type: 
									select#automatonType
										option(value='eNFA' default='true') eNFA
										option(value='NFA') NFA
										option(value='DFA') DFA
					p#fsmError.text-error
				.span6.column
					h3  &#x2461; Simulate 
					.instructions
						p
							| Enter a sequence of input symbols into the input field below or click 
							strong Random string
							| , 
							strong Acceptable string
							|  and 
							strong Unacceptable string
							|  to have the app generate random acceptable and unacceptable sequences for you.
						p
							| Click 
							strong Read next
							|  to have the FSM consume the next input symbol in the sequence and 
							strong Read all
							|  to consume all remaining input symbols.
							| &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Click 
							strong Step backward
							|  to go back one symbol and 
							strong Reset
							|  to reset the FSM and go back to the beginning of the input sequence.
						p
							| The input field highlights the input symbol that will be read next.
					p
						button#generateRandomString.btn(disabled='')  Random string 
						button#generateRandomAcceptableString.btn(disabled='')  Acceptable string 
						button#generateRandomUnacceptableString.btn(disabled='')  Unacceptable string 
					p
						.control-group
							input#inputString.input-block-level(type='text' placeholder='See if this fits' disabled='' spellcheck='false')
					p
						button#startStop.btn(disabled='')
							| Start
						button#inputFirst.btn(disabled='')
							i.icon-fast-backward
							| &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Reset
						button#inputPrevious.btn(disabled='')
							i.icon-backward
							| &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Step backward
						button#inputNext.btn(disabled='')
							i.icon-forward
							| &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Read next
						button#inputLast.btn(disabled='')
							i.icon-fast-forward
							| &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Read all
					p#inputError.text-error
			.container.graph
				h3  &#x2462; Transition graph 
				#automatonGraph  

	script(src='https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js')
	script(src='https://netdna.bootstrapcdn.com/twitter-bootstrap/2.2.2/js/bootstrap.min.js')
	script(src='http://mdaines.github.io/viz.js/bower_components/viz.js/viz.js')
	script(type='text/javascript' src='/js/fsm_view.js')
